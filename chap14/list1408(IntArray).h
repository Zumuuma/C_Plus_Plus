//整数配列クラスIntArray（第４版：ヘッダ部）

#ifndef ___Class_IntArray
#define ___Class_IntArray

//=====整数配列クラス=====//
class IntArray
{
	int nelem; //配列の要素数
	int *vec;  //先頭要素へのポインタ

public:
	//-----添字範囲エラー-----//
	class IdxRngErr //入れ子クラス
	{
	private:
		const IntArray *ident;
		int idx;

	public:
		IdxRngErr(const IntArray *p, int i) : ident(p), idx(i) {}
		int index() const { return idx; }
	};

	//---明示的コンストラクタ【定義】---//
	explicit IntArray(int size) : nelem(size) { vec = new int[nelem]; }

	//---コピーコンストラクタ【宣言】---//
	IntArray(const IntArray &x);

	//---デストラクタ【定義】---//
	~IntArray() { delete[] vec; }

	//---要素数を返す---//
	int size() const { return nelem; }

	//---代入演算子=【宣言】---//
	IntArray &operator=(const IntArray &x);

	//---添字演算子[]【定義】---//
	int &operator[](int i)
	{
		if (i < 0 || i >= nelem)
		{
			throw IdxRngErr(this, i); //添字範囲エラー送出
		}

		return vec[i];
	}

	//---const版添字演算子[]【定義】---//
	const int &operator[](int i) const
	{
		if (i < 0 || i >= nelem)
		{
			throw IdxRngErr(this, i); //添字範囲エラー送出
		}

		return vec[i];
	}
};

#endif